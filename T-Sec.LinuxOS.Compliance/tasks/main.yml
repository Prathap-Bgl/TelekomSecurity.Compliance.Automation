---
# ------------------------------------------------------------------------
# Telekom Security - Compliance Automation
# Linux OS for Servers (3.65)
# Tasks
# ------------------------------------------------------------------------

# Stop playbook if Linux distro and version is not supported.
- fail:
    msg: "Your {{ansible_distribution}} version {{ ansible_distribution_version }} is not supported!"
  when: (ansible_distribution != "Ubuntu" and ansible_os_family != "RedHat" and ansible_os_family != "Amazon") or
        (ansible_distribution == "CentOS" and ansible_distribution_major_version != "7") or
        (ansible_distribution == "RedHat" and ansible_distribution_major_version != "7") or
        (ansible_distribution == "Ubuntu" and ansible_distribution_version != "14.04") and
        (ansible_distribution == "Ubuntu" and ansible_distribution_version != "16.04") and
        (ansible_distribution == "Ubuntu" and ansible_distribution_version != "18.04")

# Stop playbook if it is a 32 bit system
- fail:
    msg: "32 Bit systems are not supported!"
  when: (ansible_architecture != "x86_64")

# Read variables for detected OS from '/vars/<linux-os>.yml' files
- name: read variables for detected os
  include_vars: "{{ item }}"
  with_first_found:
    - files:
      - "{{ ansible_os_family }}.yml"
      - "{{ ansible_distribution }}-{{ ansible_distribution_major_version }}.yml"
      - "{{ ansible_distribution }}.yml"
      skip: true

# System update (as requested with Req 19) must be done before security
# configuration. That's why relevante tasks are placed here!

- name: req-019.1 upgrade linux os (ubuntu)
  apt:
    upgrade: dist
    update_cache: yes
    cache_valid_time: 3600
    force_apt_get: no
  when: ansible_os_family == "Debian" and
      ( do_system_upgrade and not ansible_check_mode)

- name: req-019.2 upgrade linux os (redhat)
  yum:
    name: '*'
    state: latest
  when: ansible_os_family == "RedHat" and
      ( do_system_upgrade and not ansible_check_mode)

# ------------------------------------------------------------------------
# 01 basic hardening
# ------------------------------------------------------------------------
#- include_vars: vars_linux(01)basic-hardening.yml

#- import_tasks: hardening_linux(01)basic-hardening.yml
#  when: not ansible_check_mode

#- import_tasks: compliance_linux(01)basic-hardening.yml
#  when: ansible_check_mode

# ------------------------------------------------------------------------
# 02 logging
# ------------------------------------------------------------------------
#- include_vars: vars_linux(02)logging.yml

#- import_tasks: hardening_linux(02)logging.yml
#  when: not ansible_check_mode

#- import_tasks: compliance_linux(02)logging.yml
#  when: ansible_check_mode

# ------------------------------------------------------------------------
# 03 logging pam
# ------------------------------------------------------------------------
- include_vars: vars_linux(03)pam.yml
- import_tasks: test.yml

#- import_tasks: hardening_linux(03)pam.yml
#  when: not ansible_check_mode

#- import_tasks: compliance_linux(03)pam.yml
#  when: ansible_check_mode

# ------------------------------------------------------------------------
# 04 iptables
# ------------------------------------------------------------------------
#- include_vars: vars_linux(04)iptables.yml

#- import_tasks: hardening_linux(04)iptables.yml
#  when: not ansible_check_mode

#- import_tasks: compliance_linux(04)iptables.yml
#  when: ansible_check_mode

# ------------------------------------------------------------------------
# 05 mac
# ------------------------------------------------------------------------
#- include_vars: vars_linux(05)mac.yml

#- import_tasks: hardening_linux(05)mac.yml
#  when: not ansible_check_mode

#- import_tasks: compliance_linux(05)mac.yml
#  when: ansible_check_mode

# ------------------------------------------------------------------------
# 06 compliance checks
# ------------------------------------------------------------------------
#- include_vars: vars_linux(06)compliance_checks.yml

#- import_tasks: compliance_linux(06)additional_checks.yml
#  when: ansible_check_mode
