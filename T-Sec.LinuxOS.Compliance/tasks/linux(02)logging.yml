---
# ------------------------------------------------------------------------
# Telekom Security - Compliance Automation
# Linux OS for Servers (3.65)
# Tasks: 02 Logging
# ------------------------------------------------------------------------

# Req 30:	Logging must be enabled in bootloader configuration.

- block:
    - name: req-030.1 enable logging before auditd starts
      lineinfile:
        path: '/etc/default/grub'
        regexp: ^GRUB_CMDLINE_LINUX=(.*)"
        line: GRUB_CMDLINE_LINUX="audit=1"
        state: present
      register: check_grub_logging
      failed_when: check_grub_logging.changed
  rescue:
    - debug:
        msg: "Req-030 (1/1): FAILED"
  when: config_grub_logging and ansible_check_mode

# Req 31:	Log rotation for logfiles must be configured.

- name: req-031.1 disable unused filesystems
  template:
    src: 'logrotate.j2'
    dest: '/etc/logrotate.conf'
    owner: root
    group: root
    mode: 0644
  when: config_log_rotate and not ansible_check_mode

- block:
    - name: req-031.2 check time for log rotate
      lineinfile:
        path: '/etc/logrotate.conf'
        line: '{{ log_rotate_time }}'
        state: present
      register: check_rotate_time
      failed_when: check_rotate_time.changed
  rescue:
    - debug:
        msg: "Req-031 (1/3): FAILED"
  when: config_log_rotate and ansible_check_mode

- block:
    - name: req-031.3 check count for log rotate
      lineinfile:
        path: '/etc/logrotate.conf'
        regexp: '^rotate'
        line: 'rotate {{ log_rotate_count }}'
        state: present
      register: check_rotate_count
      failed_when: check_rotate_count.changed
  rescue:
        msg: "Req-031 (2/3): FAILED"
  when: config_log_rotate and ansible_check_mode

- block:
    - name: req-052.6 check max size for log rotate
      lineinfile:
        path: '/etc/logrotate.conf'
        line: 'maxsize {{ log_rotate_maxsize }}'
        state: present
      register: check_rotate_maxsize
      failed_when: check_rotate_maxsize.changed
  rescue:
    - debug:
        msg: "Req-031 (3/3): FAILED"
  when: config_log_rotate and ansible_check_mode

# Req 32:	System time must be synchronized against a reference time source.

- block:
    - name: req-032.1 install ntp/chrony
      package:
        name: {{ ntp_software }}
        state: present
      register: check_ntp
      failed_when: not check_ntp.changed and ansible_check_mode
      notify: restart ntp
  rescue:
    - debug:
        msg: "Req-032 (1/5): FAILED"
  when: config_ntp and

- name: req-032.2 set time zone
  command: timedatectl set-timezone {{ use_timezone }}
  when: config_ntp and
       (set_timezone and not ansible_check_mode)

- block:
    - name: req-032.3 check time zone
      shell: timedatectl status | grep -i "{{ use_timezone }}" | wc -l
      register: check_timezone
      failed_when: check_timezone.stdout == "0"
      changed_when: false
      check_mode: no
  rescue:
    - debug:
        msg: "Req-032 (2/5): FAILED"
  when: config_ntp and
       (set_timezone and not ansible_check_mode)

- block:
    - name: req-032.4 change init.d/ntp file
      lineinfile:
        dest: '/etc/init.d/ntp'
        regexp: '^RUNASUSER=(.*)'
        line: 'RUNASUSER=ntp'
      register: check_ntp
      failed_when: not check_ntp.changed and ansible_check_mode
      notify: restart ntp
  rescue:
    - debug:
        msg: "Req-032 (2/3): FAILED"
  when: config_ntp and ansible_os_family == "Debian"

- name: req-032.5 change ntp.conf
  template:
    src: '{{ ntp_config_file }}'
    dest: '/etc/{{ntp_software}}.conf'
    owner: root
    group: root
    mode: 0644
  notify: restart ntp
  when: config_ntp and not ansible_check_mode

- block:
    - name: req-032.6 check ntp config file
      stat:
        path: '/etc/{{ntp_software}}.conf'
      register: ntp_status
      failed_when: ntp_status.stat.exists == false
  rescue:
    - debug:
        msg: "Req-032 (3/5): FAILED"
  when: config_ntp and ansible_check_mode

- block:
    - name: req-032.7 check ntp configuration
      lineinfile:
        path: '/etc/{{ntp_software}}.conf'
        line: "server {{ item }}"
        state: present
      register: ntp_srv_check
      failed_when: (ntp_srv_check is changed)
      with_items: "{{ ntp_servers }}"
  rescue:
    - debug:
        msg: "Req-032 (4/5): FAILED"
  when: ansible_check_mode and ntp_status.stat.exists

- block:
    - name: req-032.8 change chronyd file
      lineinfile:
        dest: '/etc/sysconfig/chronyd'
        regexp: '^OPTIONS=(.*)'
        line: 'OPTIONS="-u chrony"'
      register: check_chrony
      failed_when: not check_chrony.changed and ansible_check_mode
      notify: restart ntp
  rescue:
    - debug:
        msg: "Req-032 (5/5): FAILED"
  when: config_ntp and ansible_os_family == "RedHat"

# Req 33:	Auditd service must be used to log security relevant events.

- block:
    - name: req-033.1 check if auditd is installed
      package:
        name: '{{ audit_deamon }}'
        state: absent
      register: check_auditd
      failed_when: check_auditd.changed and ansible_check_mode
      changed_when: false
  rescue:
    - debug:
        msg: "Req-033 (1/4): FAILED"
  when: config_auditd

- name: req-030 enable logging before auditd starts
  lineinfile:
    path: '/etc/default/grub'
    regexp: ^GRUB_CMDLINE_LINUX=(.*)"
    line: GRUB_CMDLINE_LINUX="audit=1"
    state: present
  notify: update grub
  when: config_grub_logging and not ansible_check_mode

- block:
    - name: req-033.2 check max size for log rotate in auditd.conf
      lineinfile:
        path: '/etc/audit/auditd.conf'
        regexp: '^max_log_file ='
        line: 'max_log_file = {{ auditd_file_size }}'
        state: present
      register: check_auditd_maxsize
      failed_when: check_auditd_maxsize.changed and ansible_check_mode
  rescue:
    - debug:
        msg: "Req-033 (2/4): FAILED"
  when: config_auditd and config_log_rotate

- block:
    - name: req-033.3 check if rotate is enabled for auditd
      lineinfile:
        path: '/etc/audit/auditd.conf'
        regexp: '^num_logs ='
        line: 'num_logs = {{ auditd_num_logs }}'
        state: present
      register: check_auditd_num_logs
      failed_when: check_auditd_num_logs.changed and ansible_check_mode
      notify: restart auditd
  rescue:
    - debug:
        msg: "Req-033 (3/4): FAILED"
  when: config_auditd and config_log_rotate

- block:
    - name: req-033.4 check if rotate is enabled for auditd
      lineinfile:
        path: '/etc/audit/auditd.conf'
        regexp: '^max_log_file_action ='
        line: 'max_log_file_action = {{ auditd_rotate_action }}'
        state: present
      register: check_auditd_rotate
      failed_when: check_auditd_rotate.changed and ansible_check_mode
      notify: restart auditd
  rescue:
    - debug:
        msg: "Req-033 (4/4): FAILED"
  when: config_auditd and config_log_rotate

# Req 34:	System events must be logged.

# Req 35:	Access and Authentication events must be logged.

# Req 36:	Account and Group Management events must be logged.

# Req 37:	Configuration Change events must be logged.

# Req 38:	Auditd configuration must be immutable.

- block:
    - name: req-051.7 check if audit configuration is immutable
      lineinfile:
        path: '/etc/audit/audit.rules'
        line: '-e 2'
        state: present
      register: check_log_immutable
      failed_when: (check_log_immutable is changed)
  rescue:
    - debug:
        msg: "WARNING: Audit configuration is not set to immutable in audit.rules file!"
  when: check_auditd_installed.changed == true

# Req 39:	Security relevant logging data must be send to an external system direct
# after their creation.

# Req 40:	If RSyslog is used, the default permission of 640 or more restrictive
# for logfiles must be configured.

# Req 41:	If RSyslog is used, at least one central logging server must be
# configured.

# Req 42:	If Syslog-NG is used, the default permission of 640 or more restrictive
# for logfiles must be configured.

- block:
    - name: req-042.0 generate dummy failure message
      fail:
        msg: "Req 42 can not be checked automatically. Please do manual check!"
  rescue:
    - debug:
        msg: "Req-042 (1/1): FAILED"
  when: ansible_check_mode

# Req 43:	If Syslog-NG is used, at least one central logging server must be
# configured.

- block:
    - name: req-043.0 generate dummy failure message
      fail:
        msg: "Req 43 can not be checked automatically. Please do manual check!"
  rescue:
    - debug:
        msg: "Req-043 (1/1): FAILED"
  when: ansible_check_mode
