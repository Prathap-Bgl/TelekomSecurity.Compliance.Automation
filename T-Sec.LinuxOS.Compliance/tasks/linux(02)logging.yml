---
# ------------------------------------------------------------------------
# Telekom Security - Compliance Automation
# Linux OS for Servers (3.65)
# Tasks: 02 Logging
# ------------------------------------------------------------------------

# Req 30:	Logging must be enabled in bootloader configuration.

- block:
    - name: req-030.1 enable logging before auditd starts
      lineinfile:
        path: '/etc/default/grub'
        regexp: ^GRUB_CMDLINE_LINUX=(.*)"
        line: GRUB_CMDLINE_LINUX="audit=1"
        state: present
      register: check_grub_logging
      failed_when: check_grub_logging.changed
  rescue:
    - debug:
        msg: "Req-030 (1/1): FAILED"
  when: config_grub_logging and ansible_check_mode

# Req 31:	Log rotation for logfiles must be configured.

- name: req-031.1 disable unused filesystems
  template:
    src: 'logrotate.j2'
    dest: '/etc/logrotate.conf'
    owner: root
    group: root
    mode: 0644
  when: config_log_rotate and not ansible_check_mode

- block:
    - name: req-031.2 check time for log rotate
      lineinfile:
        path: '/etc/logrotate.conf'
        line: '{{ log_rotate_time }}'
        state: present
      register: check_rotate_time
      failed_when: check_rotate_time.changed
  rescue:
    - debug:
        msg: "Req-031 (1/3): FAILED"
  when: config_log_rotate and ansible_check_mode

- block:
    - name: req-031.3 check count for log rotate
      lineinfile:
        path: '/etc/logrotate.conf'
        regexp: '^rotate'
        line: 'rotate {{ log_rotate_count }}'
        state: present
      register: check_rotate_count
      failed_when: check_rotate_count.changed
  rescue:
    - debug:
        msg: "Req-031 (2/3): FAILED"
  when: config_log_rotate and ansible_check_mode

- block:
    - name: req-031.4 check max size for log rotate
      shell: grep -i "maxsize {{ log_rotate_maxsize }}" /etc/logrotate.conf | wc -l
      register: check_rotate_maxsize
      failed_when: check_rotate_maxsize.stdout == "0"
      changed_when: false
      check_mode: no
  rescue:
    - debug:
        msg: "Req-031 (3/3): FAILED"
  when: config_log_rotate and ansible_check_mode

# Req 32:	System time must be synchronized against a reference time source.

- block:
    - name: req-032.1 install ntp/chrony
      package:
        name: "{{ ntp_software }}"
        state: present
      register: check_ntp
      failed_when: check_ntp.changed and ansible_check_mode
      notify: restart ntp
  rescue:
    - debug:
        msg: "Req-032 (1/5): FAILED"
  when: config_ntp

- name: req-032.2 set time zone
  command: timedatectl set-timezone {{ use_timezone }}
  changed_when: false
  when: config_ntp and
       (set_timezone and not ansible_check_mode)

- block:
    - name: req-032.3 check time zone
      shell: timedatectl status | grep -i "{{ use_timezone }}" | wc -l
      register: check_timezone
      failed_when: check_timezone.stdout == "0"
      changed_when: false
      check_mode: no
  rescue:
    - debug:
        msg: "Req-032 (2/5): FAILED"
  when: config_ntp and
       ( set_timezone and ansible_check_mode )

- block:
    - name: req-032.4 change init.d/ntp file
      lineinfile:
        dest: '/etc/init.d/ntp'
        regexp: '^RUNASUSER=(.*)'
        line: 'RUNASUSER=ntp'
      register: check_ntp
      failed_when: check_ntp.changed and ansible_check_mode
      notify: restart ntp
  rescue:
    - debug:
        msg: "Req-032 (2/3): FAILED"
  when: config_ntp and ansible_os_family == "Debian"

- name: req-032.5 change ntp.conf
  template:
    src: '{{ ntp_config_file }}'
    dest: '/etc/{{ntp_software}}.conf'
    owner: root
    group: root
    mode: 0644
  notify: restart ntp
  when: config_ntp and not ansible_check_mode

- block:
    - name: req-032.6 check ntp config file
      stat:
        path: '/etc/{{ntp_software}}.conf'
      register: ntp_status
      failed_when: ntp_status.stat.exists == false
  rescue:
    - debug:
        msg: "Req-032 (3/5): FAILED"
  when: config_ntp and ansible_check_mode

- block:
    - name: req-032.7 check ntp configuration
      lineinfile:
        path: '/etc/{{ntp_software}}.conf'
        line: "server {{ item }}"
        state: present
      register: ntp_srv_check
      failed_when: ntp_srv_check.changed
      with_items: "{{ ntp_servers }}"
  rescue:
    - debug:
        msg: "Req-032 (4/5): FAILED"
  when: config_ntp and
        ( ansible_check_mode and ntp_status.stat.exists )

- block:
    - name: req-032.8 change chronyd file
      lineinfile:
        dest: '/etc/sysconfig/chronyd'
        regexp: '^OPTIONS=(.*)'
        line: 'OPTIONS="-u chrony"'
      register: check_chrony
      failed_when: check_chrony.changed and ansible_check_mode
      notify: restart ntp
  rescue:
    - debug:
        msg: "Req-032 (5/5): FAILED"
  when: config_ntp and ansible_os_family == "RedHat"

# Req 33:	Auditd service must be used to log security relevant events.

- block:
    - name: req-033.1 check if auditd is installed
      package:
        name: '{{ audit_deamon }}'
        state: present
      register: check_auditd
      failed_when: check_auditd.changed and ansible_check_mode
  rescue:
    - debug:
        msg: "Req-033 (1/4): FAILED"
  when: config_auditd

- name: req-030 enable logging before auditd starts
  lineinfile:
    path: '/etc/default/grub'
    regexp: ^GRUB_CMDLINE_LINUX=(.*)"
    line: GRUB_CMDLINE_LINUX="audit=1"
    state: present
  notify: update grub
  when: config_grub_logging and not ansible_check_mode

- block:
    - name: req-033.2 check max size for log rotate in auditd.conf
      lineinfile:
        path: '/etc/audit/auditd.conf'
        regexp: '^max_log_file ='
        line: 'max_log_file = {{ auditd_file_size }}'
        state: present
      register: check_auditd_maxsize
      failed_when: ansible_check_mode and
                  ( check_auditd.changed or check_auditd_maxsize.changed)
  rescue:
    - debug:
        msg: "Req-033 (2/4): FAILED"
  when: config_auditd and config_log_rotate

- block:
    - name: req-033.3 check if rotate is enabled for auditd
      lineinfile:
        path: '/etc/audit/auditd.conf'
        regexp: '^num_logs ='
        line: 'num_logs = {{ auditd_num_logs }}'
        state: present
      register: check_auditd_num_logs
      failed_when: ansible_check_mode and
                  ( check_auditd.changed or check_auditd_num_logs.changed )
      notify: restart auditd
  rescue:
    - debug:
        msg: "Req-033 (3/4): FAILED"
  when: config_auditd and config_log_rotate

- block:
    - name: req-033.4 check if rotate is enabled for auditd
      lineinfile:
        path: '/etc/audit/auditd.conf'
        regexp: '^max_log_file_action ='
        line: 'max_log_file_action = {{ auditd_rotate_action }}'
        state: present
      register: check_auditd_rotate
      failed_when: ansible_check_mode and
                  ( check_auditd.changed or check_auditd_rotate.changed )
      notify: restart auditd
  rescue:
    - debug:
        msg: "Req-033 (4/4): FAILED"
  when: config_auditd and config_log_rotate

# Req 34:	System events must be logged.
# Req 35:	Access and Authentication events must be logged.
# Req 36:	Account and Group Management events must be logged.
# Req 37:	Configuration Change events must be logged.

- name: req-034-37.1 configure logging events
  template:
    src: 'audit-rules.j2'
    dest: "{{ audit_rules_file }}"
    owner: root
    group: root
    mode: 0640
    backup: yes
  notify: restart auditd
  when: config_auditd and not ansible_check_mode

- block:
    - name: req-034.1 check logging of system events
      lineinfile:
        path: "{{ audit_rules_file }}"
        line: "{{ item }}"
        state: present
      register: check_system_events
      failed_when: check_system_events.changed or check_auditd.changed
      with_items:
        - "{{ system_events }}"
        - "{{ os_specific_system_events }}"
  rescue:
    - debug:
        msg: "Req-034 (1/1): FAILED"
  when: config_auditd and
      ( config_system_events and ansible_check_mode )

- block:
    - name: req-035.1 check logging of access and authentication events
      lineinfile:
        path: "{{ audit_rules_file }}"
        line: "{{ item }}"
        state: present
      register: check_access_events
      failed_when: check_access_events.changed or check_auditd.changed
      with_items:
        - "{{ access_events }}"
        - "{{ os_specific_access_events }}"
  rescue:
    - debug:
        msg: "Req-035 (1/2): FAILED"
  when: config_auditd and
      ( config_access_events and ansible_check_mode )

- name: req-035.2 search for privileged commands
  shell: df --local -P | awk {'if (NR!=1) print $6'} | xargs -I '{}' find '{}' -xdev -type f \( -perm -4000 -o -perm -2000 \) -print 2>/dev/null
  register: priv_commands
  changed_when: false
  check_mode: no
  when: config_auditd and config_access_events

- block:
  - name: req-035.3 configure logging for priviledged commands
    lineinfile:
      path: "{{ audit_rules_file }}"
      insertafter: EOF
      line: '-a always,exit -F path={{ item }} -F perm=x -F auid>=1000 -F auid!=4294967295 -k privileged'
      state: present
    with_items: '{{ priv_commands.stdout_lines }}'
    notify: restart auditd
    register: check_priv_log
    failed_when: ansible_check_mode and
                ( check_auditd.changed or check_priv_log.changed )
  rescue:
    - debug:
        msg: "Req-035 (2/2): FAILED"
  when: config_auditd and config_access_events

- block:
    - name: req-036.1 check logging of account and group mgmt events
      lineinfile:
        path: "{{ audit_rules_file }}"
        line: "{{ item }}"
        state: present
      register: check_agm_events
      failed_when: check_agm_events.changed or check_auditd.changed
      with_items: "{{ account_group_mgmt_events }}"
  rescue:
    - debug:
        msg: "Req-036 (1/1): FAILED"
  when: config_auditd and
      ( config_account_group_mgmt_events and ansible_check_mode )

- block:
    - name: req-037.1 check logging of configuration change events
      lineinfile:
        path: "{{ audit_rules_file }}"
        line: "{{ item }}"
        state: present
      register: check_config_events
      failed_when: check_config_events.changed or check_auditd.changed
      with_items:
        - "{{ change_events }}"
        - "{{ os_specific_change_events }}"
  rescue:
    - debug:
        msg: "Req-037 (1/1): FAILED"
  when: config_auditd and
      ( config_change_events and ansible_check_mode )

# Req 38:	Auditd configuration must be immutable.

- block:
    - name: req-038.1 make audit configuration immutable
      lineinfile:
        path: "{{ audit_rules_file }}"
        insertafter: EOF
        line: '-e 2'
        state: present
      register: check_log_immutable
      failed_when: ansible_check_mode and
                  ( check_auditd.changed or check_log_immutable.changed )
  rescue:
    - debug:
        msg: "Req-038 (1/1): FAILED"
  when: config_auditd and
      ( check_auditd.changed and config_auditd_immutable )

# Req 39:	Security relevant logging data must be send to an external system direct
# after their creation.

- block:
    - name: req-039.1 install syslog server solution
      package:
        name: '{{ syslog_type }}'
        state: present
      register: check_syslog
      failed_when: check_syslog.changed and ansible_check_mode
  rescue:
    - debug:
        msg: "Req-039 (1/1): FAILED"
  when: config_syslog

# Req 40:	If RSyslog is used, the default permission of 640 or more restrictive
# for logfiles must be configured.

- block:
    - name: req-040.1 configure rsyslog default file permission
      lineinfile:
        path: '/etc/rsyslog.conf'
        state: present
        regexp: '^\$FileCreateMode.*'
        line: '$FileCreateMode {{ rsyslog_permissions }}'
      notify: restart rsyslog
      register: check_rsyslog_permissions
      failed_when: ansible_check_mode and
                  ( check_syslog.changed or check_rsyslog_permissions.changed )
  rescue:
    - debug:
        msg: "Req-040 (1/1): FAILED"
  when: config_syslog and syslog_type == "rsyslog"

# Req 41:	If RSyslog is used, at least one central logging server must be
# configured.

- block:
  - name: req-041.1 configure logging server
    lineinfile:
      dest: '/etc/rsyslog.conf'
      state: present
      line: '*.* @{{ syslog_server }}:514'
    notify: restart rsyslog
    register: check_syslog_server
    failed_when: ansible_check_mode and
                ( check_syslog.changed or check_syslog_server.changed )
  rescue:
    - debug:
        msg: "Req-041 (1/1): FAILED"
  when: config_syslog and syslog_type == "rsyslog"

# Req 42:	If Syslog-NG is used, the default permission of 640 or more restrictive
# for logfiles must be configured.

- block:
    - name: req-042.0 generate dummy failure message
      fail:
        msg: "Req 42 can not be checked automatically. Please do manual check!"
  rescue:
    - debug:
        msg: "Req-042 (1/1): FAILED"
  when: ansible_check_mode and
      ( config_syslog and syslog_type == "syslogng")

# Req 43:	If Syslog-NG is used, at least one central logging server must be
# configured.

- block:
    - name: req-043.0 generate dummy failure message
      fail:
        msg: "Req 43 can not be checked automatically. Please do manual check!"
  rescue:
    - debug:
        msg: "Req-043 (1/1): FAILED"
  when: ansible_check_mode and
      ( config_syslog and syslog_type == "syslogng")
